                 ПОДКЛЮЧЕНИЕ TOMCAT

1. Скачиваем "apach-tomcat" с официального сайта "https://tomcat.apache.org/";
2. Открываем IntelliJ IDEA -> Run -> Edit Configurations;
3. В открывшемся окне "Run/Edit Configurations" влевом верхнем углу ЛКМ кликаем на "+";
4. В открывшемся меню внизу ищем "Tomcat Server";
5. Кликаем ЛКМ на стрелочку слева от "Tomcat Server";
6. В открывшемся подменю выбираем "local";
7. В правой стороне окна "Run/Edit Configurations" откроется настройки или конфигурация сервера, в котором по умолчанию
   будет открыт раздел "server";
8. В разделе "server" в поле "Name" даём имя нашему серверу, я дал так "FirstVadim";
9. Далее, справа от поля "application server", ЛКМ кликаем на кнопку "Configure...";
10. В открывшимся окне прописываем путь к файлу "apache-tomcat".
    У меня это:"E:\Файлы пользователя\Desktop\JAVA\ПРОГРАММЫ\apache-tomcat-9.0.82"
11. Вправом нижнем углу кликаем кнопку "Fix";
12. В открвышемся контекстном меню выбираем, кликнув ЛКМ "spring-mvc:var exploded";
13. В открывшемся разделе "Deployment" окна "Run/Edit Configurations" в поле "aplications context", которое расположенно
    внизу этого раздела, выбираем пустое значение, что бы при запуске браузера мы не видели лишней строки;
14. Далее кликаем ЛКМ поочереди кнопки "Apply" и "Ok", для того что бы добавить и сохранить связь сервера
    "apach-tomcat" со средой разработки "IntelliJ IDEA";
15. ПЕРЕЗАГРУЖАЕМ "IntelliJ IDEA"/ т.е. закрыть её и занова открыть;
16. Делаем тестовый заруск сервера "apach-tomcat", переходим в раздел "Run", в открывшемся меню ищем и кликаем на стрку
    "Run", далее в открывшемся маленьком окошке кликаем по нашему серверу с именем "FirstVadim";
17. После того, как соединение с сервером будет установленно, в консоле появится результат этого оединения:
         Connected to server(Подключено к серверу)
         [2023-11-06 02:18:59,789] Artifact spring-mvc:war exploded: Artifact is being deployed, please wait...(Артефакт развертывается, пожалуйста, подождите...)
         [2023-11-06 02:19:08,342] Artifact spring-mvc:war exploded: Artifact is deployed successfully(Артефакт успешно развернут)
         [2023-11-06 02:19:08,342] Artifact spring-mvc:war exploded: Deploy took 8,553 milliseconds(Развертывание заняло 8553 миллисекунды)
18. После того как артифакт успешно развернут, автоматически открывается страница в браузере, установленного по
    умолчанию на компьюторе. Которая сигнализирует: "Hello!                         Привет!
                                                     I'm Spring MVC application     Я приложение Spring MVC
                                                     5.2.0 version by sep'19"       Версия 5.2.0 от сентября 2019 г.
19. ЭТО ГОВОРИТ О ТОМ, ЧТО СОЕДИНЕНИЕ С СЕРВЕРОМ "apach-tomcat" ЧЕРЕЗ "IntelliJ IDEA" УСПЕШНО УСТАНОВЛЕННО.



Apache Tomcat - это бесплатный и с открытым исходным кодом веб-сервер и контейнер сервлетов, предназначенный для
                разворачивания и выполнения веб-приложений, основанных на языке программирования Java.

Локальный сервер - это сервер, который работает на вашем локальном компьютере или внутри локальной сети и обеспечивает
                   доступ к веб-сайтам, веб-приложениям или другим ресурсам на этом компьютере или внутри сети.
                   Локальные серверы используются для разработки и тестирования веб-сайтов и приложений перед их
                   развертыванием на публичных серверах. Они могут быть настроены для обработки HTTP-запросов и
                   предоставления доступа к веб-ресурсам на локальном уровне.

                   ЗАЧЕМ МЫ ИНКАПЛСУЛИРУЕМ ПОЛЯ В ДАННОМ ПРИЛОЖЕНИИ в классах "Cars" и "CarController".

1. Защита данных: для случайного предотвращения или неправильного изменения данных. Для обеспечения целостности данных
                  используем методы доступа (геттеры и сеттеры).
2. Сокрытие деталей реализации:
                  для изменения внутренней реализации класса, не влияя на код, который использует этот класс. Это
                  позволяет легко изменять или улучшать класс, не переписывая весь код, который зависит от него.
3. Упрощение обслуживания и отладки:
                  для добавления логирования, обработку ошибок и другие действия без внесения изменений в клиентский код,
                  потому как доступ к данным осуществляется через методы.
4. Поддержка инкапсуляции:
                  Инкапсуляция позволяет сокрыть сложные внутренние детали класса, предоставляя более простой и понятный
                  интерфейс для его использования.
5. Управление доступом:
                  для управления доступом к данным, разрешая только чтение (геттеры) или разрешая запись (сеттеры) в
                  соответствии с требованиями вашего приложения.